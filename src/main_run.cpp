#include <iostream>  
#include <fstream>  
#include <strstream>
#include <opencv2/core/core.hpp>  
#include <opencv2/highgui/highgui.hpp>  
#include <opencv2/imgproc/imgproc.hpp>  
#include <opencv2/objdetect/objdetect.hpp>  
#include <opencv2/ml/ml.hpp>  
#include <opencv2/gpu/gpu.hpp>  
#include "someMethod.h"
#include "parameter.h"
using namespace std;  
using namespace cv;  
//using namespace cv::gpu;  

//-----------------------???----------------------------
//---------------------------------------------------------

int main()  
{
	//????
    int descriptorDimDetect;//HOG???????[(?????-block?)/block??+1]*[(?????-block?)/block??+1]*bin??*(block?/cell?)*(block?/cell?)
	int descriptorDimClassify;
    MySVM detectSvm;//??SVM
	MySVM classifySvm;//??SVM
	detectSvm.load(DetectSvmName);
	classifySvm.load(ClassifySvmName);

	//----------------???????????????-----------------
	//---------------------------------------------------------------
	//????
gpu::HOGDescriptor detectHOG(WinSizeDetect,BlockSizeDetect,BlockStrideDetect,CellSizeDetect,NbinsDetect,1,0.2,false,5);//??HOG???
//HOGDescriptor detectHOG(WinSizeDetect,BlockSizeDetect,BlockStrideDetect,CellSizeDetect,NbinsDetect,1,0.2,false,5);//??HOG???
	HOGDescriptor classifyHOG(WinSizeClassify,BlockSizeClassify,BlockStrideClassify,CellSizeClassify,NbinsClassify);//??HOG??????????HOG????
    descriptorDimDetect = detectSvm.get_var_count();//?????????HOG??????????????????????????????????????
    descriptorDimClassify = classifySvm.get_var_count();//?????????HOG??????????????????????????????????????
	int supportVectorDetectNum = detectSvm.get_support_vector_count();//???????
	int supportVectorCassifyNum = classifySvm.get_support_vector_count();//???????
    cout<<"Detect???????"<<supportVectorDetectNum<<endl;  
	cout<<"Cassify???????"<<supportVectorCassifyNum<<endl;  
    Mat alphaDetectMat = Mat::zeros(1, supportVectorDetectNum, CV_32FC1);//alpha?????????????
	Mat alphaClassifyMat = Mat::zeros(1, supportVectorCassifyNum, CV_32FC1);//alpha????????????? 
    Mat supportVectorDetectMat = Mat::zeros(supportVectorDetectNum, descriptorDimDetect, CV_32FC1);//??????  
	Mat supportVectorClassifyMat = Mat::zeros(supportVectorCassifyNum, descriptorDimClassify, CV_32FC1);//??????  
    Mat resultDetectMat = Mat::zeros(1, descriptorDimDetect, CV_32FC1);//alpha?????????????  
	Mat resultClassifyMat = Mat::zeros(1, descriptorDimClassify, CV_32FC1);//alpha?????????????  

    //??w??
    for(int i=0; i<supportVectorDetectNum; i++)//???????????supportVectorMat???  
	{
        const float * pSVData = detectSvm.get_support_vector(i);//???i??????????  
        for(int j=0; j<descriptorDimDetect; j++)  
            supportVectorDetectMat.at<float>(i,j) = pSVData[j];  
    }
	for(int i=0; i<supportVectorCassifyNum; i++)//???????????supportVectorMat???  
	{
		const float * pSVData = classifySvm.get_support_vector(i);//???i??????????  
		for(int j=0; j<descriptorDimClassify; j++)  
			supportVectorClassifyMat.at<float>(i,j) = pSVData[j];  
	}
    double * pAlphaDetectData = detectSvm.get_alpha_vector();//??SVM???????alpha??  
	double * pAlphaClassifyData = classifySvm.get_alpha_vector();//??SVM???????alpha??  
    for(int i=0; i<supportVectorDetectNum; i++)//?alpha????????alphaMat?  
        alphaDetectMat.at<float>(0,i) = pAlphaDetectData[i];  
	for(int i=0; i<supportVectorCassifyNum; i++)//?alpha????????alphaMat?  
		alphaClassifyMat.at<float>(0,i) = pAlphaClassifyData[i];  
	resultDetectMat = -1 * alphaDetectMat * supportVectorDetectMat;//??-(alphaMat * supportVectorMat),????resultMat?
    resultClassifyMat = -1 * alphaClassifyMat * supportVectorClassifyMat;//??-(alphaMat * supportVectorMat),????resultMat? 

    //?????setSVMDetector(const vector<float>& detector)?????????  
    vector<float> myDetector;//??Hog???SVM????w+b?
    for(int i=0; i<descriptorDimDetect; i++)//?resultMat?????????myDetector?  
        myDetector.push_back(resultDetectMat.at<float>(0,i));  
    myDetector.push_back(detectSvm.get_rho());//???????rho??????  
    cout<<"??Hog???SVM?????(w+b)?"<<myDetector.size()<<endl;

	//??SVMDetector???
    detectHOG.setSVMDetector(myDetector);  

	//-------------------------???????????-----------------------------------
	//????
	VideoCapture myVideo(TestVideo);//????  
Mat src0,src4,dst0;
	gpu::GpuMat src,dst;					//??????????

	//????
	if(!myVideo.isOpened()){cout<<"??????"<<endl;system("puase");return -1;}

	//???????
	double videoRate=myVideo.get(CV_CAP_PROP_FPS);//????
	int videoWidth=myVideo.get(CV_CAP_PROP_FRAME_WIDTH);//????????
	int videoHight=myVideo.get(CV_CAP_PROP_FRAME_HEIGHT);//????????
	int videoDelay=1000/videoRate;//?????????????????????????????????
	VideoWriter outputVideo(ResultVideo, CV_FOURCC('M', 'J', 'P', 'G'), videoRate, Size(videoWidth, videoHight));//?????

	//??????
	bool stop = false;
	for (int fnum = 1;!stop;fnum++)
	{
		cout<<fnum<<endl;

		//????
		if (!myVideo.read(src0)){cout<<"????"<<endl;waitKey(0); break;}//?????
		//resize(videoFrame,videoFrame,Size(0,0),2,2);//?????????
		src0.copyTo(dst0);
cvtColor(src0,src4,CV_BGR2BGRA);
src.upload(src4);
		vector<Rect> found;//?????

		//????????????? 
		detectHOG.detectMultiScale(src, found, HitThreshold, WinStride, Size(), DetScale, 2);
		//detectHOG.detectMultiScale(src0, found, HitThreshold, WinStride, Size(), DetScale, 2);
		//???1???2??????3???????????4????(???block??????)5????6???????????7????8????

		//???????????
		for(int i=0; i<found.size(); i++)  
		{
			cout<<"width:"<<found[i].width<<"  height:"<<found[i].height<<endl;//????????
			vector<float> descriptors;//HOG?????
			Mat descriptorsMat(1, descriptorDimClassify, CV_32FC1);//????HOG?????????=1???=??????
			Mat temp;

			resize(src0(found[i]),temp,WinSizeClassify);//??????????

//classifyHOG.getDescriptors(temp,Size(0,0),descriptorsMatGpu);

//Mat descriptorsMat(descriptorsMatGpu);

			classifyHOG.compute(temp,descriptors);//??HOG???
			for(int i=0; i<descriptorDimClassify; i++)  
				descriptorsMat.at<float>(0,i) = descriptors[i];//????????

			float classifyResult = classifySvm.predict(descriptorsMat);//??????????

			if (classifyResult == 1)//???
			{
				rectangle(dst0, found[i], Scalar(255,0,0), 3);//????????
				if (SAVESET)//????????
				{
					strstream ss;
					string s;
					ss<<ResultVideoFile_1<<1000*fnum+i<<".jpg";
					ss>>s;
					imwrite(s,src0(found[i]));
				}
			} 
			else if (classifyResult == 2)//???
			{
				rectangle(dst0, found[i], Scalar(0,255,0), 3);//????????
				if (SAVESET)//????????
				{
					strstream ss;
					string s;
					ss<<ResultVideoFile_2<<1000*fnum+i<<".jpg";
					ss>>s;
					imwrite(s,src0(found[i]));
				}
			}
			else if (classifyResult ==3)//??
			{
				rectangle(dst0, found[i], Scalar(0,0,255), 3);//????????
				if (SAVESET)//????????
				{
					strstream ss;
					string s;
					ss<<ResultVideoFile_3<<1000*fnum+i<<".jpg";
					ss>>s;
					imwrite(s,src0(found[i]));
				}
			}
			else//??
			{
				rectangle(dst0, found[i], Scalar(255,255,255), 3);//????????
			}

		}

		//??????
		outputVideo<<dst0;
		imshow("dst",dst0);
		if(waitKey(1)>=0)stop = true;//????????

	}
	//---------------------------------end---------------------------------------

}  
